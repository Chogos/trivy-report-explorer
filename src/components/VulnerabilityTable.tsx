import React, { useState } from 'react';

import { useReport } from '../context/ReportContext';
import { Vulnerability, EKSCISControl, ReportType } from '../types';

const VulnerabilityTable: React.FC = () => {
  const { getFilteredFindings, reportType } = useReport();
  const [selectedVulnerability, setSelectedVulnerability] = useState<
    Vulnerability | EKSCISControl | null
  >(null);

  const items = getFilteredFindings();

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'bg-github-red text-white';
      case 'HIGH':
        return 'bg-github-orange text-white';
      case 'MEDIUM':
        return 'bg-github-yellow';
      case 'LOW':
        return 'bg-github-green text-white';
      default:
        return 'bg-github-gray text-white';
    }
  };

  const openItemDetails = (item: Vulnerability | EKSCISControl) => {
    setSelectedVulnerability(item);
  };

  if (items.length === 0) {
    return (
      <div className='bg-white rounded-md border border-github-border p-8 text-center'>
        <p className='text-gray-500'>
          No items found matching the current filters.
        </p>
      </div>
    );
  }

  // Render table for Trivy vulnerability reports
  if (reportType === ReportType.TRIVY_VULNERABILITY) {
    const vulnerabilities = items.map(item => item as unknown as Vulnerability);

    return (
      <>
        <div className='bg-white rounded-md border border-github-border overflow-hidden'>
          <div className='overflow-x-auto'>
            <table className='min-w-full divide-y divide-github-border'>
              <thead className='bg-github-bg'>
                <tr>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Severity
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Vulnerability
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Package
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Current Version
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Fixed Version
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Resource
                  </th>
                </tr>
              </thead>
              <tbody className='bg-white divide-y divide-github-border'>
                {vulnerabilities.map((vulnerability, index) => (
                  <tr
                    key={`${vulnerability.VulnerabilityID}-${index}`}
                    className='hover:bg-github-bg cursor-pointer'
                    onClick={() => openItemDetails(vulnerability)}
                  >
                    <td className='px-6 py-4 whitespace-nowrap'>
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.Severity)}`}
                      >
                        {vulnerability.Severity.toLowerCase()}
                      </span>
                    </td>
                    <td className='px-6 py-4'>
                      <div className='text-sm font-medium text-github-blue'>
                        {vulnerability.VulnerabilityID}
                      </div>
                      <div className='text-sm text-gray-500 truncate max-w-xs'>
                        {vulnerability.Title || 'No title available'}
                      </div>
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap text-sm'>
                      {vulnerability.PkgName}
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap text-sm'>
                      {vulnerability.InstalledVersion}
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap text-sm'>
                      {vulnerability.FixedVersion || 'Not available'}
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap text-sm'>
                      <span className='text-xs bg-github-bg rounded px-2 py-1'>
                        {vulnerability.Target}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className='bg-github-bg px-6 py-3 border-t border-github-border'>
            <p className='text-sm text-gray-500'>
              Showing {vulnerabilities.length} vulnerabilities
            </p>
          </div>
        </div>

        {selectedVulnerability &&
          isVulnerability(selectedVulnerability) &&
          renderVulnerabilityModal(selectedVulnerability)}
      </>
    );
  }
  // Render table for EKS CIS reports
  else if (reportType === ReportType.EKS_CIS) {
    const controls = items.map(item => item as unknown as EKSCISControl);

    return (
      <>
        <div className='bg-white rounded-md border border-github-border overflow-hidden'>
          <div className='overflow-x-auto'>
            <table className='min-w-full divide-y divide-github-border'>
              <thead className='bg-github-bg'>
                <tr>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Severity
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    ID
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Control Name
                  </th>
                  <th
                    scope='col'
                    className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                  >
                    Failed Count
                  </th>
                </tr>
              </thead>
              <tbody className='bg-white divide-y divide-github-border'>
                {controls.map((control, index) => (
                  <tr
                    key={`${control.ID}-${index}`}
                    className='hover:bg-github-bg cursor-pointer'
                    onClick={() => openItemDetails(control)}
                  >
                    <td className='px-6 py-4 whitespace-nowrap'>
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(control.Severity)}`}
                      >
                        {control.Severity.toLowerCase()}
                      </span>
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap'>
                      <div className='text-sm font-medium text-github-blue'>
                        {control.ID}
                      </div>
                    </td>
                    <td className='px-6 py-4'>
                      <div className='text-sm text-gray-700'>
                        {control.Name}
                      </div>
                    </td>
                    <td className='px-6 py-4 whitespace-nowrap text-sm'>
                      {control.TotalFail !== undefined
                        ? control.TotalFail
                        : 'Manual check'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className='bg-github-bg px-6 py-3 border-t border-github-border'>
            <p className='text-sm text-gray-500'>
              Showing {controls.length} controls
            </p>
          </div>
        </div>

        {selectedVulnerability &&
          isEKSCISControl(selectedVulnerability) &&
          renderEKSCISControlModal(selectedVulnerability)}
      </>
    );
  }

  return null;
};

// Type guard to check if an item is a Vulnerability
function isVulnerability(
  item: Vulnerability | EKSCISControl
): item is Vulnerability {
  return 'VulnerabilityID' in item;
}

// Type guard to check if an item is an EKSCISControl
function isEKSCISControl(
  item: Vulnerability | EKSCISControl
): item is EKSCISControl {
  return 'ID' in item;
}

// Render modal for Vulnerability details
const renderVulnerabilityModal = (vulnerability: Vulnerability) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'bg-github-red text-white';
      case 'HIGH':
        return 'bg-github-orange text-white';
      case 'MEDIUM':
        return 'bg-github-yellow';
      case 'LOW':
        return 'bg-github-green text-white';
      default:
        return 'bg-github-gray text-white';
    }
  };

  return (
    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>
      <div className='bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto'>
        <div className='p-6'>
          <div className='flex justify-between items-start'>
            <div>
              <h2 className='text-2xl font-semibold'>
                {vulnerability.VulnerabilityID}
              </h2>
              <p className='text-gray-600 mt-1'>
                {vulnerability.Title || 'No title available'}
              </p>
            </div>
            <span
              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.Severity)}`}
            >
              {vulnerability.Severity.toLowerCase()}
            </span>
          </div>

          <div className='mt-6'>
            <h3 className='text-lg font-medium mb-2'>Description</h3>
            <p className='text-gray-700 whitespace-pre-line'>
              {vulnerability.Description || 'No description available.'}
            </p>
          </div>

          <div className='mt-6 grid grid-cols-1 md:grid-cols-2 gap-4'>
            <div>
              <h3 className='text-lg font-medium mb-2'>Package Details</h3>
              <table className='min-w-full'>
                <tbody>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>Package</td>
                    <td className='py-2 text-sm'>{vulnerability.PkgName}</td>
                  </tr>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>
                      Current Version
                    </td>
                    <td className='py-2 text-sm'>
                      {vulnerability.InstalledVersion}
                    </td>
                  </tr>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>
                      Fixed Version
                    </td>
                    <td className='py-2 text-sm'>
                      {vulnerability.FixedVersion || 'Not available'}
                    </td>
                  </tr>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>Status</td>
                    <td className='py-2 text-sm'>
                      {vulnerability.Status || 'Unknown'}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div>
              <h3 className='text-lg font-medium mb-2'>Resource Information</h3>
              <table className='min-w-full'>
                <tbody>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>Target</td>
                    <td className='py-2 text-sm'>
                      {vulnerability.Target || 'N/A'}
                    </td>
                  </tr>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>Type</td>
                    <td className='py-2 text-sm'>
                      {vulnerability.Type || 'N/A'}
                    </td>
                  </tr>
                  <tr className='border-t border-github-border'>
                    <td className='py-2 pr-4 text-sm font-medium'>Class</td>
                    <td className='py-2 text-sm'>
                      {vulnerability.Class || 'N/A'}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          {vulnerability.References && vulnerability.References.length > 0 && (
            <div className='mt-6'>
              <h3 className='text-lg font-medium mb-2'>References</h3>
              <ul className='list-disc pl-5 space-y-1'>
                {vulnerability.References.map((ref, index) => (
                  <li key={index} className='text-sm'>
                    <a
                      href={ref}
                      target='_blank'
                      rel='noopener noreferrer'
                      className='text-github-blue hover:underline'
                    >
                      {ref}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className='mt-8 flex justify-end'>
            <button
              onClick={() => document.querySelector('.fixed')?.remove()}
              className='px-4 py-2 bg-github-bg text-gray-700 rounded border border-github-border hover:bg-gray-100'
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Render modal for EKS CIS Control details
const renderEKSCISControlModal = (control: EKSCISControl) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'bg-github-red text-white';
      case 'HIGH':
        return 'bg-github-orange text-white';
      case 'MEDIUM':
        return 'bg-github-yellow';
      case 'LOW':
        return 'bg-github-green text-white';
      default:
        return 'bg-github-gray text-white';
    }
  };

  return (
    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50'>
      <div className='bg-white rounded-lg shadow-xl max-w-2xl w-full'>
        <div className='p-6'>
          <div className='flex justify-between items-start'>
            <div>
              <h2 className='text-2xl font-semibold'>{control.ID}</h2>
              <p className='text-gray-600 mt-1'>{control.Name}</p>
            </div>
            <span
              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(control.Severity)}`}
            >
              {control.Severity.toLowerCase()}
            </span>
          </div>

          <div className='mt-6'>
            <h3 className='text-lg font-medium mb-2'>Control Details</h3>
            <table className='min-w-full'>
              <tbody>
                <tr className='border-t border-github-border'>
                  <td className='py-2 pr-4 text-sm font-medium'>ID</td>
                  <td className='py-2 text-sm'>{control.ID}</td>
                </tr>
                <tr className='border-t border-github-border'>
                  <td className='py-2 pr-4 text-sm font-medium'>Name</td>
                  <td className='py-2 text-sm'>{control.Name}</td>
                </tr>
                <tr className='border-t border-github-border'>
                  <td className='py-2 pr-4 text-sm font-medium'>Severity</td>
                  <td className='py-2 text-sm'>{control.Severity}</td>
                </tr>
                <tr className='border-t border-github-border'>
                  <td className='py-2 pr-4 text-sm font-medium'>
                    Failed Items
                  </td>
                  <td className='py-2 text-sm'>
                    {control.TotalFail !== undefined
                      ? `${control.TotalFail} ${control.TotalFail === 1 ? 'item' : 'items'}`
                      : 'Manual check required'}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <div className='mt-6'>
            <p className='text-sm text-gray-500'>
              For detailed remediation instructions, refer to the
              <a
                href='https://www.cisecurity.org/benchmark/kubernetes'
                target='_blank'
                rel='noopener noreferrer'
                className='ml-1 text-github-blue hover:underline'
              >
                CIS EKS Benchmark Documentation
              </a>
            </p>
          </div>

          <div className='mt-8 flex justify-end'>
            <button
              onClick={() => document.querySelector('.fixed')?.remove()}
              className='px-4 py-2 bg-github-bg text-gray-700 rounded border border-github-border hover:bg-gray-100'
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTable;
