import React from 'react';

import { BaseFinding, Vulnerability } from '../../types';
import { DetailModal } from '../modals/DetailModal';

interface VulnerabilityViewProps {
  findings: (BaseFinding & Vulnerability)[];
  onItemSelect: (item: BaseFinding & Vulnerability) => void;
  selectedItem: (BaseFinding & Vulnerability) | null;
}

export const VulnerabilityView: React.FC<VulnerabilityViewProps> = ({
  findings,
  onItemSelect,
  selectedItem,
}) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'bg-github-red text-white';
      case 'HIGH':
        return 'bg-github-orange text-white';
      case 'MEDIUM':
        return 'bg-github-yellow';
      case 'LOW':
        return 'bg-github-green text-white';
      default:
        return 'bg-github-gray text-white';
    }
  };

  return (
    <>
      <div className='bg-white rounded-md border border-github-border overflow-hidden'>
        <div className='overflow-x-auto'>
          <table className='min-w-full divide-y divide-github-border'>
            <thead className='bg-github-bg'>
              <tr>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Severity
                </th>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Vulnerability
                </th>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Package
                </th>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Current Version
                </th>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Fixed Version
                </th>
                <th
                  scope='col'
                  className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'
                >
                  Resource
                </th>
              </tr>
            </thead>
            <tbody className='bg-white divide-y divide-github-border'>
              {findings.map((vulnerability, index) => (
                <tr
                  key={`${vulnerability.id}-${index}`}
                  className='hover:bg-github-bg cursor-pointer'
                  onClick={() => onItemSelect(vulnerability)}
                >
                  <td className='px-6 py-4 whitespace-nowrap'>
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.severity)}`}
                    >
                      {vulnerability.severity.toLowerCase()}
                    </span>
                  </td>
                  <td className='px-6 py-4'>
                    <div className='text-sm font-medium text-github-blue'>
                      {vulnerability.VulnerabilityID}
                    </div>
                    <div className='text-sm text-gray-500 truncate max-w-xs'>
                      {vulnerability.Title || 'No title available'}
                    </div>
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap text-sm'>
                    {vulnerability.PkgName}
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap text-sm'>
                    {vulnerability.InstalledVersion}
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap text-sm'>
                    {vulnerability.FixedVersion || 'Not available'}
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap text-sm'>
                    <span className='text-xs bg-github-bg rounded px-2 py-1'>
                      {vulnerability.Target}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className='bg-github-bg px-6 py-3 border-t border-github-border'>
          <p className='text-sm text-gray-500'>
            Showing {findings.length} vulnerabilities
          </p>
        </div>
      </div>

      {selectedItem && (
        <DetailModal
          item={selectedItem}
          onClose={() => onItemSelect(null as any)}
          renderContent={() => (
            <>
              <div className='mt-6'>
                <h3 className='text-lg font-medium mb-2'>Description</h3>
                <p className='text-gray-700 whitespace-pre-line'>
                  {selectedItem.description || 'No description available.'}
                </p>
              </div>

              <div className='mt-6 grid grid-cols-1 md:grid-cols-2 gap-4'>
                <div>
                  <h3 className='text-lg font-medium mb-2'>Package Details</h3>
                  <table className='min-w-full'>
                    <tbody>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>
                          Package
                        </td>
                        <td className='py-2 text-sm'>{selectedItem.PkgName}</td>
                      </tr>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>
                          Current Version
                        </td>
                        <td className='py-2 text-sm'>
                          {selectedItem.InstalledVersion}
                        </td>
                      </tr>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>
                          Fixed Version
                        </td>
                        <td className='py-2 text-sm'>
                          {selectedItem.FixedVersion || 'Not available'}
                        </td>
                      </tr>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>
                          Status
                        </td>
                        <td className='py-2 text-sm'>
                          {selectedItem.Status || 'Unknown'}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <div>
                  <h3 className='text-lg font-medium mb-2'>
                    Resource Information
                  </h3>
                  <table className='min-w-full'>
                    <tbody>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>
                          Target
                        </td>
                        <td className='py-2 text-sm'>
                          {selectedItem.Target || 'N/A'}
                        </td>
                      </tr>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>Type</td>
                        <td className='py-2 text-sm'>
                          {selectedItem.Type || 'N/A'}
                        </td>
                      </tr>
                      <tr className='border-t border-github-border'>
                        <td className='py-2 pr-4 text-sm font-medium'>Class</td>
                        <td className='py-2 text-sm'>
                          {selectedItem.Class || 'N/A'}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>

              {selectedItem.References &&
                selectedItem.References.length > 0 && (
                  <div className='mt-6'>
                    <h3 className='text-lg font-medium mb-2'>References</h3>
                    <ul className='list-disc pl-5 space-y-1'>
                      {selectedItem.References.map((ref, index) => (
                        <li key={index} className='text-sm'>
                          <a
                            href={ref}
                            target='_blank'
                            rel='noopener noreferrer'
                            className='text-github-blue hover:underline'
                          >
                            {ref}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
            </>
          )}
        />
      )}
    </>
  );
};
